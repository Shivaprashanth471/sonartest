on:
  push:
    branches:
      - master       # The default branch
      # - branch-* 
name: Main Workflow
jobs:
  sonarQubeTrigger:
    name: SonarQube Trigger
    runs-on: ubuntu-latest
    steps:
    # - name: Install Google Chrome # Using shell script to install Google Chrome
    #   run: |
    #     chmod +x InstallChrome.sh
    #     InstallChrome.sh
    - name: Check out my other private repo
      uses: actions/checkout@master
      with:
        repository: tericsoft-services/vitawerks_automation 
        token: ${{ secrets.my_pat }}
    - name: check pom file
      run: |
        ls
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name:  Install Google Chrome # Using shell script to install Google Chrome
      run:   |
              chmod +x ./InstallChrome.sh
              ./InstallChrome.sh 
    - name: Build with Maven
      run: mvn test --file pom.xml
    
        
    # - name: chrome
    #   run: |
    #     cd /usr/local/bin/
    #     ls
    # - name: check
    #   run: mvn test -Dtest=Pipeline1_Web_Smoke
    # - uses: actions/checkout@v2 # Checkout the code
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1 # Setup JAVA
      with:
        java-version: 1.8
    - name: Install Google Chrome # Using shell script to install Google Chrome
      run: |
        chmod +x ./InstallChrome.sh
        ./InstallChrome.sh
    # - name: Set up Maven
    #   uses: aahmed-se/setup-maven@v3
    #   with:
    #     maven-version: 3.6.1      


    # - name: Setup Maven
    #   uses: stCarolas/setup-maven@v4.3

    # - name: Set up JDK 11
    #   uses: actions/setup-java@v1
    #   with:
    #     java-version: 11

    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    # - name: chrome
    #   uses: browser-actions/setup-chromium@latest
    # - name: chrome version
    #   run: chrome --version 
    # - name: Start selenoid
    #   uses: Xotabu4/selenoid-github-action@v2
    # - uses: actions/checkout@v1
    #   run: npm ci  
    
    # - name: Install Google Chrome # Using shell script to install Google Chrome
    #   run: |
    #    chmod +x ./scripts/InstallChrome.sh
    #     ./scripts/InstallChrome.sh      
    # - name:  Install Google Chrome 
    #   run:   |
    #           sudo chmod +x ./scripts/InstallChrome.sh
    #                       ./scripts/InstallChrome.sh 
    # - uses: actions/checkout@v2
    # - name: setup-chromedriver
    #   uses: nanasess/setup-chromedriver@v1.0.7
    #   with:
    #     # Optional: do not specify to match Chrome's version
    #     chromedriver-version: '88.0.4324.96'
    # - run: |
    #     export DISPLAY=:99
    #     chromedriver --url-base=/wd/hub &
    #     sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 & # optional    
            

    # - name: list
    #   run: |
    #     mvn test -Dtest=Pipeline1_Web_Smoke
    
    # - name: Install dependencies
    #   run: |
    #     python -m pip install --upgrade pip
    #     pip install pipenv
    #     pipenv install
    - name: Prepare Selenium
      # https://github.com/marketplace/actions/setup-chromedriver
      uses: nanasess/setup-chromedriver@master
    # - name: Launch browser
    #   run: |
    #     google-chrome --version
    #     export DISPLAY=:99
    #     chromedriver --url-base=/wd/hub &
    #     sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 & # optional, disables headless mode
    - name: checking
      run: ls
    - name: Run tests  
      run: |
        mvn clean install -U
        mvn test -Dtest=Pipeline1_Web_Smoke  

    # - name: deploy to server
    #   uses: AEnterprise/rsync-deploy@v1.0
    #   env:
    #     DEPLOY_KEY: ${{ secrets.ACL_PEM }}
    #     ARGS: "-e -c -r --delete"
    #     SERVER_PORT: 22
    #     FOLDER: reports
    #     SERVER_IP: ${{ secrets.ACL_IP }}
    #     USERNAME: ubuntu
    #     SERVER_DESTINATION: /var/www/test2/
    # - name: run script
    #   id: testreports
    #   run: | 
    #     for dir1 in ./reports/* 
    #     do 
    #       var1=$(basename "$dir1")
    #       echo $var1
    #       echo "::set-output name=date::${var1}"
    #     done
    #     for dir2 in $dir1/* 
    #     do 
    #       var2=$(basename "$dir2")
    #       echo $var2
    #       echo "::set-output name=timestamp::${var2}"
    #     done
      
 
    # - name: run  script in the server
    #   uses: garygrossgarten/github-action-ssh@release
    #   with:
    #     command: |
    #       cd /var/www/test2/
    #       sh reports.sh
    #     host: ${{ secrets.ACL_IP}}
    #     username: ubuntu
    #     privateKey: ${{ secrets.ACL_PEM}}

    # - name: checkout to our code 
    #   uses: actions/checkout@master
    # - name: ls
    #   run: ls 
    - name: run  script in the server
      uses: garygrossgarten/github-action-ssh@release
      with:
        command: |
          cd /var/www/test2/
          sh reports.sh
        host: ${{ secrets.ACL_IP}}
        username: ubuntu
        privateKey: ${{ secrets.ACL_PEM}}

    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: general
        # SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        # SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_MESSAGE: test2.teric.services/reports/${{ steps.testreports.outputs.date }}/${{ steps.testreports.outputs.timestamp }}/
        # SLACK_TITLE: Post Title
        # SLACK_USERNAME: 
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }} 















    # - name: Slack - Github Action
    #   uses: keithalpichi/slack-action@0.0.6
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    #   with:
       
    #    SLACK_MESSAGE: test2.teric.services/reports/${{ steps.testreports.outputs.date }}/${{ steps.testreports.outputs.timestamp }}/

        
    

 
    # - name: Check out my other private repo
    #   uses: actions/checkout@master
    #   with:
    #     repository: tericsoft-services/vitawerks_automation 
    #     token: ${{ secrets.my_pat }}    
           
    # - uses: actions/checkout@master
    #   with:
    #     name: tericsoft-services/vitawerks_automation     
    #     run: |
    #       maven install
    #       mvn test -Dtest=Pipeline1_Api_Smoke mvn test -Dtest=Pipeline1_Web_Smoke


       
    # - name: SonarQube Scan
    #   uses: kitabisa/sonarqube-action@v1.1.0
    #   with:
    #     host: ${{ secrets.SONARQUBE_HOST }}
    #     token: ${{ secrets.SONAR_TOKEN}}
    #     # path: ${{secrets.SONAR_PATH}}
    #     key: ${{secrets.SONAR_PROJECTKEY}}
    #     login: ${{secrets.SONAR_LOGIN}}
    #     password: ${{secrets.SONAR_PASSWORD}}



# on:
#   push:
#     branches:
#       - "main"
# name: Main Workflow
# jobs:
#   sonarQubeTrigger:
#     name: SonarQube Trigger
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@master
#     - name: SonarQube Scan
#       uses: kitabisa/sonarqube-action@v1.1.0
#       with:
#         host: ${{ secrets.SONARQUBE_HOST }}
#         login: ${{ secrets.SONARQUBE_TOKEN }}
#         # path: ${{secrets.SONAR_PATH}}
        